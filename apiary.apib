FORMAT: 1A
HOST: https://api.vogelhetuit.nl/v1

# Vogel het uit
The *Vogel het uit* service for sharing gps tracks (trips), assigning points of interest, attaching questions to poi, recieving answers and building trip story.

# Formatting

- Geo data must be in [GeoJSON](http://www.geojson.org) format.
- Timestamps must be in [ISO 8601](http://en.wikipedia.org/wiki/ISO_8601) (YYYY-MM-DDTHH:MM:SSZ) format.

# Authentication
Use Basic-authentication to get a OAUTH v2 token.
Not a all requests require authentication, when authentication is required it will be specified.

## eEcology authentication

eEcology credentials are required to fetch tracks from the eEcology database.
Only tracks for which the user is privilegged will be returned.

The credentials need to be supppied as a http header *Authorization-for-eEcologyDB* with a value same as Basic authentication.

# Pagination

Use same pagination scheme as Github API. See http://developer.github.com/v3/#pagination

# Multi lingual

The website or app should be multi lingual defaulting to Nederlands.
The text fields which can be filled with this API should be made in the language for the target audience.

# Group Species
A tracker is tied to an animal of a certain species.
Species can be used to filter tracks, trips or stories.

## Species [/species/{id}]

+ Parameters
    + id (string) ... Species identifier.

+ Model (application/hal+json)

        {
            "id": "8915",
            "latin_name": "Larus Fuscus",
            "common_name": {
                "nl": "Kleine mantelmeeuw",
                "en": "Lesser Black-backed gull"
            },
            "_links": {
                "self": {"href": "/species/8915"},
                "trips": {"href": "/trips/species/8915"},
                "stories": {"href": "/stories/species/8915"},
            }
        }

### Retrieve a single species [GET]

+ Response 200

    [Species][]

## Species Collection [/species]

+ Model (application/hal+json)

        [{
            "id": "8915",
            "latin_name": "Larus Fuscus",
            "common_name": {
                "nl": "Kleine mantelmeeuw",
                "en": "Lesser Black-backed gull"
            },
            "_links": {
                "self": {"href": "/species/8915"},
                "trips": {"href": "/trips/species/8915"},
                "stories": {"href": "/stories/species/8915"},
            }
        }]

### Retrieve list of species [GET]

+ Response 200

    [Species Collection][]

# Group Tracks

A track of a tracker is required to make a trip.

## Tracker [/trackers/{id}]

> TODO does tracker need textual info, or should only POI have info.

+ Parameters
    + id (string) ... Tracker identifier.

+ Model (application/hal+json)

        {
            "id": "355",
            "species": "Larus Fuscus",
            "project": "Texel",
            "begin": "2011-04-15T12:05:00Z",
            "end": "2013-08-15T12:05:00Z",
            "_links": {
                "self": {"href": "/trackers/355"},
                "stories": {"href": "/stories/tracker/355"},
                "species": {"href": "/species/8915"},
                "track": {"href": "/tracks/123/{start}/{end}", "templated": true},
                "trips": {"href": "/trips/tracker/355"}
            }
        }

### Retrieve information about a tracker [GET]

+ Request

    + Headers

            Authorization-for-eEcologyDB: Basic Base64 encoded username:password

+ Response 200

    [Tracker][]

## Trackers [/trackers]

+ Model (application/hal+json)

        [{
            "species": "Larus Fuscus",
            "project": "Texel",
            "begin": "2011-04-15T12:05:00Z",
            "end": "2013-08-15T12:05:00Z",
            "_links": {
                "self": {"href": "/trackers/355"},
                "species": {"href": "/species/8915"},
                "stories": {"href": "/stories/tracker/355"},
                "track": { "href": "/tracks/123/{start}/{end}", "templated": true},
                "trips": {"href": "/trips/tracker/355"}
            }
        }]

### Get a list of trackers [GET]

+ Request

    + Headers

            Authorization-for-eEcologyDB: Basic Base64 encoded username:password

+ Response 200

    [Trackers][]

## Track [/tracks/{id}/{start}/{end}]

A track is a list of coordinates from a tracker constraint by a start and end timestamp.

+ Parameters
    + id (number) ... Tracker identifier.
    + start (iso8601date) ... Start timestamp.
    + end (iso8601date) ... End timestamp.

+ Model (application/hal+json)

            {
                "tracker": "355",
                "start": "2013-04-15T00:05:00Z",
                "end": "2013-04-16T12:05:00Z",
                "geo": {
                    "type": "FeatureCollection",
                    "bbox": [54.342, 12.543, 54.642, 12.543],
                    "features": [{
                        "type": "Feature",
                        "geometry": {"type": "Point", "coordinates": [54.342, 12.543, -5]},
                        "properties": {"ts":  "2013-04-15T12:05:00Z", "speed": 0}
                    }, {
                        "type": "Feature",
                        "geometry": {"type": "Point", "coordinates": [54.442, 12.543, -3]},
                        "properties": {"ts":  "2013-04-15T12:10:00Z", "speed": 33}
                    }, {
                        "type": "Feature",
                        "geometry": {"type": "Point", "coordinates": [54.642, 12.543, -3]},
                        "properties": {"ts":  "2013-04-15T12:15:00Z", "speed": 20}
                    }]
                },
                "_links": {
                    "self": {"href": "/tracks/123/2013-04-15T00:05:00Z/2013-04-16T12:05:00Z"},
                    "stories": {"href": "/stories/tracker/355"},
                    "tracker": {"href": "/tracker/355"},
                    "trip": {"href": "/trips/tracker/355"}
                }
            }

### Get coordinates of a track [GET]

+ Request

    + Headers

            Authorization-for-eEcologyDB: Basic Base64 encoded username:password

+ Response 200

    [Track][]

# Group Trips
A trip resource is a subset of a track with timestamped coordinates.

## Trip [/trips/{id}]

+ Parameters
    + id (string) ... Trip identifier.

+ Model (application/hal+json)

        {
            "tracker": "355",
            "start": "2013-04-14T10:00:00Z",
            "end": "2013-04-15T12:00:00Z",
            "geo": {
                "type": "FeatureCollection",
                "bbox": [54.342, 12.543, 54.642, 12.543],
                "features": [{
                    "type": "Feature",
                    "geometry": {"type": "Point", "coordinates": [54.342, 12.543, -5]},
                    "properties": {"ts":  "2013-04-15T12:05:00Z", "speed": 0}
                }, {
                    "type": "Feature",
                    "geometry": {"type": "Point", "coordinates": [54.442, 12.543, -3]},
                    "properties": {"ts":  "2013-04-15T12:10:00Z", "speed": 33}
                }, {
                    "type": "Feature",
                    "geometry": {"type": "Point", "coordinates": [54.642, 12.543, -3]},
                    "properties": {"ts":  "2013-04-15T12:15:00Z", "speed": 20}
                }]
            },
            "is_visible": false,
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_links": {
                "self": {"href": "/trips/355"},
                "created_by": {"href": "/users/3"},
                "pois": {"href": "/trips/355/pois"},
                "tracker": {"href": "/tracker/355"}
            }
        }

### Retrieve a trip. [GET]

+ Response 200

    [Trip][]

### Update a trip. [PUT]

+ Request

    [Trip][]

+ Response 200

### Delete a trip. [DELETE]

+ Response 204

## Trips [/trips]

+ Model (application/hal+json)

        [{
            "id": "1",
            "tracker": "123",
            "start": "2013-04-14T10:00:00Z",
            "end": "2013-04-15T12:00:00Z",
            "bbox": [54.342, 12.543, 54.642, 12.543],
            "_links": {
                "self": "/trips/1"
            }
        }]

### List of trips. [GET]

+ Response 200

    [Trips][]

## Trips by tracker [/trips/tracker/{id}]

+ Parameters
    + id (string) ... Tracker identifier.

### Create a trip. [POST]

The Trip resource requires the following attributes:

- start (string) ... Start time of trip.
- end (string) ... End time of trip.
- geo (GeoJSON) ... List of features that appear between start and end time.
- is_visible (boolean) ... Visiblility of trip. A hidden trip can only be seen by users with *researcher* role.

> TODO add visualization options, eg. color for speed, color for hour of day

> TODO does trip need textual info, or should only POI have info.

+ Request

    [Trip][]

+ Response 201

    + Headers

            Location: /trips/1

### List of trips filtered on tracker [GET]

+ Response 200

    [Trips][]

## List of trips filtered on species [/trips/species/{species}]

+ Parameters
    + species (string) ... A species latin name. See [Group Species](#page:species) to fetch choices.

### GET

+ Response 200

    [Trips][]

## List of trips filtered on geo bounding box [/trips/bbox/{minlat}/{minlon}/{maxlat}/{maxlon}]

+ Parameters
    + minlat (number) ... Minimum latitude
    + minlon (number) ... Minimum longitude
    + maxlat (number) ... Maximum latitude
    + maxlon (number) ... Maximum longitude

### GET

+ Response 200

    [Trips][]

## List of trips filtered on distance from a location [/trips/dist/{lat}/{lon}/{radius}]

+ Parameters
    + lat (number) ... Latitude of location
    + lon (number) ... Longitude of location
    + radius (number) ... Radius in meters

### GET

+ Response 200

    [Trips][]

# Group POIs
A point of interest is a place on a trip where a questions are connected to.

## Point of interest [/trips/{trip}/pois/{poi}]

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.

+ Model (application/hal+json)

        {
            "location": {
                "type": "Point",
                "coordinates": [54.642, 12.543]
            },
            "radius": "100",
            "background": "Text giving background, motiviation for poi",
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_self": {
                "self": {"href": "/trips/1/pois/1"},
                "created_by": {"href": "/users/3"},
                "trip": {"href": "/trips/1"},
                "questions": {"href": "/trips/{trip}/pois/{poi}/questions"}
            }
        }

### Retrieve a POI [GET]

+ Response 200

    [Point of interest][]

### Update a POI [PUT]

+ Request

    [Point of interest][]

+ Response 200

## Collection of points of interest [/trips/{trip}/pois]

+ Parameters
    + trip (string) ... Trip identifier.

### Create a point of interest [POST]

+ Request

    [Point of interest][]

+ Response 201

    + Headers

            Location: /trips/1/pois/1

### List points of interest for a trip [GET]

+ Response 200 (application/hal+json)

            [{
                "location": {
                    "type": "Point",
                    "coordinates": [54.642, 12.543]
                },
                "radius": "100",
                "background": "Text giving background, motiviation for poi",
                "_self": {
                    "self": {"href": "/trips/1/pois/1"}
                }
            }]

# Group Questions
See http://manual.limesurvey.org/LimeSurvey_Manual for question types
and http://developer.surveygizmo.com/rest-api-documentation/objects/ for possible API.

## Question [/trips/{trip}/pois/{poi}/questions/{question}]

Types of questions:

- radio, multiple options with only one possible choice
- dropdown, a dropdown menu
- checkbox, multiple options with one or more possible choices
- text, short text field for an open question, this can be used as comment field.
- image, the answer value should be the url of the Media resource that was uploaded before submitting the answer.
- video, the answer value should be the url of the Media resource that was uploaded before submitting the answer.

+ Parameter
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + question (string) ... Question identifier

+ Model (application/hal+json)

        {
            "type": "radio, image or video or ...",
            "title": "Question text",
            "description" : "Description text",
            "shortname": "Shortname or alias",
            "other": true,  # When true adds 'Other' option, a short text field,
            "options": [{
                "title": "Title of option",
                "value": "Value of option"
            }],
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_links": {
                "self": {"href": "/trips/1/pois/1/questions/1"},
                "trip": {"href": "/trips/1"},
                "poi": {"href": "/trips/1/pois/1"},
                "answers": {"href": "/trips/1/pois/1/questions/1/answers"},
                "created_by": {"href": "/users/1"}
            }
        }

### Retrieve a question [GET]

+ Response 200

    [Question][]

### Update a question [PUT]

+ Request

    [Question][]

+ Response 200

## Questions [/trips/{trip}/pois/{poi}/questions]

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.

+ Model (application/hal+json)

        [{
            "type": "radio, image or video or ...",
            "title": "Question text",
            "description" : "Description text",
            "shortname": "Shortname or alias",
            "other": true,  # When true adds 'Other' option, a short text field,
            "options": [{
                "title": "Title of option",
                "value": "Value of option"
            }],
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_links": {
                "self": {"href": "/trips/1/pois/1/questions/1"},
                "trip": {"href": "/trips/1"},
                "poi": {"href": "/trips/1/pois/1"},
                "answers": {"href": "/trips/1/pois/1/questions/1/answers"},
                "created_by": {"href": "/users/1"}
            }
        }]

### Create a question [POST]

+ Request

    [Question][]

+ Response 201

    + Headers

            Location: /trips/1/pois/1/questions/1

### List of questions [GET]

+ Response 200

    [Questions][]

## Question library [/questions]

### List of questions [GET]
Fetch list of questions independ of trip or poi.

+ Response 200

    [Questions][]

## Answer [/trips/{trip}/pois/{poi}/questions/{question}/answers/{answer}]

Attributes:

- timestamp, need to know when answer was given.
- location, need to know where answer was given.
- orientation, optional, heading or direction and tilting, used when question type is image or video otherwise ignored.
- value, the answer itself.

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + question (string) ... Question identifier.
    + answer (string) ... Answer identifier.

+ Model (application/hal+json)

        {
            "timestamp": "2013-05-14T12:30:00Z",
            "location": {
                "type": "Point",
                "coordinates": [54.642, 12.543]
            },
            "orientation": {
                "head": 225.00,
                "tilt": 45.0
            },
            "value": "0",
            "answered_by": "32",
            "answered_on": "2013-09-04T12:30:00Z",
            "moderated_on": "2013-09-14T12:30:00Z",
            "moderated_by": "5",
            "_links": {
                "self": {"href": "/trips/1/pois/1/questions/1/answers/1"},
                "question": {"href": "/trips/1/pois/1/questions/1"},
                "poi": {"href": "/trips/1/pois/1"},
                "trip": {"href": "/trips/1"},
                "answered_by": {"href": "/users/32"},
                "moderate": {"href": "/trips/1/pois/1/questions/1/answer/1/moderate"},
                "moderated_by": {"href": "/users/1"}
            }
        }

### Retrieve an answer [GET]

Will only show answers to user who submitted answer or user with *researcher* role.

+ Response 200

    [Answer][]

## Moderate answer [/trips/{trip}/pois/{poi}/questions/{question}/answer/{answer}/moderate]

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + question (string) ... Question identifier.
    + answer (string) ... Answer identifier.

### Approve answer [PUT]
Moderate media by approving it.

+ Response 204

### Disapprove answer [DELETE]
Moderate media by disapproving it.
This will delete the answer and if question type is image or video will also delete the uploaded media.

+ Response 204

## Answers [/trips/{trip}/pois/{poi}/questions/{question}/answers]

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + question (string) ... Question identifier

+ Model (application/hal+json)

        [{
            "timestamp": "2013-05-14T12:30:00Z",
            "location": {
                "type": "Point",
                "coordinates": [54.642, 12.543]
            },
            "answered_by": "32",
            "answered_on": "2013-09-04T12:30:00Z",
            "moderated_on": "2013-09-14T12:30:00Z",
            "moderated_by": "5",
            "_links": {
                "self": {"href": "/trips/1/pois/1/questions/1/answers/1"},
                "question": {"href": "/trips/1/pois/1/questions/1"},
                "poi": {"href": "/trips/1/pois/1"},
                "trip": {"href": "/trips/1"},
                "answered_by": {"href": "/users/32"},
                "moderate": {"href": "/trips/1/pois/1/questions/1/answer/1/moderate"},
                "moderated_by": {"href": "/users/1"}
            }
        }]

### Create an answer [POST]

+ Request

    [Answer][]

+ Response 201

    + Headers

            Location: /trips/1/pois/1/questions/1/answers/1

### Retrieve answers for a question [GET]

Will only show answers to user who submitted answer or user with *researcher* role.

+ Response 200

    [Answers][]

## Unmoderated answers for question [/trips/1/pois/1/questions/1/answers/unmoderated]

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + question (string) ... Question identifier.
    + answer (string) ... Answer identifier.

### Retrieve unmoderated answers [GET]

Will only show answers to user who submitted answer or user with *moderator* role.

+ Response 200

    [Answers][]

## All unmoderated answers [/answers/unmoderated]

### Retrieve unmoderated answers [GET]

Will only show answers to user who submitted answer or user with *moderator* role.

+ Response 200

    [Answers][]

# Group Stories
A story is about a trip and it's POIs combined with the supplied answers and insight of researcher.

## Story [/stories/{id}]

+ Parameters
    + id (string) ... Story identifier

+ Model (application/hal+json)

        {
            "id": "1",
            "trip": "1",
            "title": "Title of story",
            "body": "Body of story",
            "is_visible": "Boolean whether story should be visible",
            "answers": [{
                "id": "Id of an answer""/trips/1/pois/1/questions/1/answers/1",
                "highlighted": "Boolean whether answer should be highlighted"
            }],
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_links": {
                "self": {"href": "/stories/1"},
                "trip": {"href": "/trips/1"},
                "created_by": {"href": "/users/3"}
            }
        }

### Get a story [GET]

+ Response 200

    [Story][]

### Update a story [PUT]

+ Request

    [Story][]

+ Response 204

## Stories [/stories]

+ Model (application/hal+json)

        [{
            "id": "1",
            "trip": "1",
            "title": "Title of story",
            "body": "Body of story",
            "is_visible": "Boolean whether story should be visible",
            "answers": [{
                "id": "Id of an answer""/trips/1/pois/1/questions/1/answers/1",
                "highlighted": "Boolean whether answer should be highlighted"
            }],
            "created_by": "3",
            "created_on": "2013-04-14T10:00:00Z",
            "_links": {
                "self": {"href": "/stories/1"},
                "trip": {"href": "/trips/1"},
                "created_by": {"href": "/users/3"}
            }
        }]


### Create a story [POST]

+ Request

    [Story][]

+ Response 201

    + Headers

            Location: /stories/1

### List of stories [GET]

+ Response 200

    [Stories][]

# Group Users
User administration and profile.

Roles:

- anonymous, can answer questions, but can not change anything else (this includes submitting comments and media).
- registered, can answer questions, submit comments and media. Can also see in his/her profile the work he/she done.
- moderator, can see answers of everyone and delete answers. Same for comments and media.
- researcher, can fetch tracks and create a trip, poi, questions and a story.
- administrator, can assign roles to users.

## OAuth

> TODO add endpoints for OAuth 2.0 communications

## Collection of users [/users]

### Create a user [POST]

A created user will automaticly get the *registered* role.

+ Request (application/json)

        {
            "username": "User chosen username",
            "password": "Password",
            "password_verify": "Password verification",
            "email": "e-mail adres of user",
            "phone": "(Mobile) phone number, used by researcher to ask feedback"
        }

+ Response 201

    + Headers

            Location: /users/1

## A single user [/users/{user}]

+ Parameters
    + user (string) ... User identifier.

## Roles [/users/{user}/roles]

The user can see it's roles and user with *administrator* role can see other users roles.
Role can be added to a user or removed from a user by logged in user who has *administrator* role.

+ Parameters
    + user (string) ... User identifier.

### List of roles [GET]

+ Response 200 (application/json)

            [
                "registered"
            ]

## Relation of user and role [/users/{user}/roles/{role}]

+ Parameters
    + user (string) ... User identifier.
    + role (string) ... Role identifier.

### Add role to user [PUT]

+ Response 204

### Remove role from user [DELETE]

+ Response 204

# Group Media question uploads
Before a video or image question can be answered the media must first be uploaded.

> Video and images answers can not be handled with a **Answer** resource,
> because binary data must be uploaded using a POST with binary date instead of a POST with a JSON body.

## Media upload [/trips/{trip}/pois/{poi}/uploads/{id}]
Media upload meta information.

+ Parameters
    + trip (string) ... Trip identifier.
    + poi (string) ... Point of interest identifier.
    + id (string) ... Media upload identifier.

### Retrieve media content [GET]

+ Response 200

    + Header

            Content-Type: image/png
            Content-Length: 1234

    + Body

            <bytes of media>

### Delete media [DELETE]

+ Response 204

## Media uploads [/trips/{trip}/pois/{poi}/uploads]

+ Parameters
    + trip (string) ... Trip identifier
    + poi (string) ... Point of interest identifier

### Add media [POST]

Curl example:

    curl -i -H 'Content-Type: image/png' -X POST "http://api.vogelhetuit.nl/v1/trips/1/pois/1/uploads" --data-binary @img1.png

+ Request

    + Headers

            Content-Type: image/png
            Content-Length: 1234

    + Body

            <bytes of media>

+ Response 201

    + Headers

            Location: /trips/1/pois/1/uploads/1

### List of media [GET]

+ Response 200 (application/json)

            [{
                "content_type": "image/jpeg",
                "size": 1234,
                "created_on": "2013-04-15T12:05:00Z",
                "created_by": "1",
                "_links": {
                    "self": {"href": "/trips/1/pois/1/uploads/1"},
                    "poi": {"href": "/trips/1/pois"},
                    "created_by": {"href": "/users/1"}
                }
            }]

# Group Attachments
The POIs background, question description and story body can be enriched with images.
The identifier of the attachment can be used in img tag as src attribute.

## Collection of attachments [/attachments]

### Add an file [POST]

Curl example:

    curl -i -H 'Content-Type: image/png' -X POST "http://api.vogelhetuit.nl/v1/attachments" --data-binary @img1.png

Upload file or files using multi-part form.

+ Request

    + Headers

            Content-Type: image/png
            Content-Length: 1234

    + Body

            <bytes of attachment>

+ Response 201

    + Headers

            Location: /attachments/1

### List of attachments [GET]

+ Response 200 (application/json)

            [{
                "content_type": "image/jpeg",
                "size": 1234,
                "created_on": "2013-04-15T12:05:00Z",
                "created_by": "1",
                "_links": {
                    "self": {"href": "/attachments/1"},
                    "created_by": {"href": "/users/1"}
                }
            }]

## A single attachment [/attachments/{id}]

+ Parameters
    + id (string) ... Attachment identifier

### Retrieve attachment content [GET]

The *content_type* will be set to the content type of the attachment.

+ Response 200

    + Headers

            Content-Type: image/png
            Content-Length: 1234

    + Body

            <bytes of attachment>

### Delete attachment [DELETE]

+ Response 204


